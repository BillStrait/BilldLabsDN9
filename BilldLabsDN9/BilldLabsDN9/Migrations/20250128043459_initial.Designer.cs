// <auto-generated />
using System;
using BilldLabsDN9.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BilldLabsDN9.Migrations
{
    [DbContext(typeof(BLDBContext))]
    [Migration("20250128043459_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_general_ci")
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BilldLabsDN9.Data.Categories.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BilldLabsDN9.Data.Interfaces.BasePostDetail", b =>
                {
                    b.Property<Guid>("PostDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("varchar(21)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PostType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UnpublishDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("PostDetailId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BasePostDetail");

                    b.HasDiscriminator().HasValue("BasePostDetail");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BilldLabsDN9.Data.Models.Post", b =>
                {
                    b.Property<Guid>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PostDetailId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PostDetiailId")
                        .HasColumnType("char(36)");

                    b.Property<int>("PostType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PostId");

                    b.HasIndex("PostDetailId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("BilldLabsDN9.Data.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsContributor")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PassKeyPublicKey")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("SuspendDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BilldLabsDN9.Data.PostTemplates.Template", b =>
                {
                    b.Property<Guid>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.PrimitiveCollection<string>("AvailableForCategories")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PostType")
                        .HasColumnType("int");

                    b.HasKey("TemplateId");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("BilldLabsDN9.Data.PostDetails.ComicReview", b =>
                {
                    b.HasBaseType("BilldLabsDN9.Data.Interfaces.BasePostDetail");

                    b.Property<string>("ComicArtist")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ComicAuthor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ComicTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CoverAltText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CoverArist")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CoverUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReferralUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("ReviewScore")
                        .HasColumnType("decimal(65,30)");

                    b.HasDiscriminator().HasValue("ComicReview");
                });

            modelBuilder.Entity("BilldLabsDN9.Data.Interfaces.BasePostDetail", b =>
                {
                    b.HasOne("BilldLabsDN9.Data.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("BilldLabsDN9.Data.Models.Post", b =>
                {
                    b.HasOne("BilldLabsDN9.Data.Interfaces.BasePostDetail", "PostDetail")
                        .WithMany()
                        .HasForeignKey("PostDetailId");

                    b.Navigation("PostDetail");
                });
#pragma warning restore 612, 618
        }
    }
}
